# app.py - VERS√ÉO OTIMIZADA PARA STREAMLIT CLOUD
import streamlit as st
import pandas as pd
import numpy as np

# Tente importar plotly, mas tenha fallback
try:
    import plotly.express as px
    import plotly.graph_objects as go
    PLOTLY_AVAILABLE = True
except ImportError:
    PLOTLY_AVAILABLE = False
    st.error("Plotly n√£o est√° dispon√≠vel. Usando gr√°ficos nativos do Streamlit.")

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise Sa√∫de Municipal",
    page_icon="üè•",
    layout="wide"
)

st.title("üè• An√°lise: Influ√™ncia das Caracter√≠sticas Populacionais nas Pol√≠ticas de Sa√∫de")

# Dados de exemplo
@st.cache_data
def carregar_dados():
    np.random.seed(42)
    n = 100
    
    dados = pd.DataFrame({
        'Munic√≠pio': [f'Munic√≠pio {i}' for i in range(1, n+1)],
        'Popula√ß√£o': np.random.randint(10000, 500000, n),
        '% Idosos': np.random.uniform(5, 25, n),
        'PIB per Capita': np.random.uniform(10000, 50000, n),
        'Interna√ß√µes/1000': np.random.uniform(10, 100, n),
        'Procedimentos/1000': np.random.uniform(50, 500, n),
        'Regi√£o': np.random.choice(['Norte', 'Nordeste', 'Sudeste', 'Sul', 'Centro-Oeste'], n)
    })
    
    return dados

df = carregar_dados()

# Filtros
st.sidebar.header("Filtros")
regiao = st.sidebar.multiselect("Regi√£o", options=df['Regi√£o'].unique(), default=df['Regi√£o'].unique())

# Aplicar filtros
df_filtrado = df[df['Regi√£o'].isin(regiao)]

# M√©tricas
col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric("Munic√≠pios", len(df_filtrado))
with col2:
    st.metric("Popula√ß√£o M√©dia", f"{df_filtrado['Popula√ß√£o'].mean():,.0f}")
with col3:
    st.metric("% Idosos M√©dio", f"{df_filtrado['% Idosos'].mean():.1f}%")
with col4:
    st.metric("PIB M√©dio", f"R$ {df_filtrado['PIB per Capita'].mean():,.0f}")

# Gr√°ficos
st.header("üìä An√°lise de Rela√ß√µes")

if PLOTLY_AVAILABLE:
    # Usando Plotly
    col1, col2 = st.columns(2)
    
    with col1:
        fig = px.scatter(
            df_filtrado,
            x='% Idosos',
            y='Interna√ß√µes/1000',
            title='Rela√ß√£o: % Idosos vs Interna√ß√µes'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        fig = px.scatter(
            df_filtrado,
            x='PIB per Capita',
            y='Procedimentos/1000', 
            title='Rela√ß√£o: PIB vs Procedimentos'
        )
        st.plotly_chart(fig, use_container_width=True)
        
    # Gr√°fico de barras por regi√£o
    st.subheader("Procedimentos por Regi√£o")
    dados_agregados = df_filtrado.groupby('Regi√£o')['Procedimentos/1000'].mean().reset_index()
    fig = px.bar(dados_agregados, x='Regi√£o', y='Procedimentos/1000')
    st.plotly_chart(fig, use_container_width=True)
    
else:
    # Fallback com gr√°ficos nativos do Streamlit
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Rela√ß√£o: % Idosos vs Interna√ß√µes")
        st.scatter_chart(df_filtrado, x='% Idosos', y='Interna√ß√µes/1000')
    
    with col2:
        st.subheader("Rela√ß√£o: PIB vs Procedimentos")
        st.scatter_chart(df_filtrado, x='PIB per Capita', y='Procedimentos/1000')
    
    st.subheader("Procedimentos por Regi√£o")
    dados_agregados = df_filtrado.groupby('Regi√£o')['Procedimentos/1000'].mean()
    st.bar_chart(dados_agregados)

# An√°lise de correla√ß√£o
st.header("üîó An√°lise de Correla√ß√£o")
correlacao = df_filtrado['% Idosos'].corr(df_filtrado['Interna√ß√µes/1000'])
st.metric("Correla√ß√£o % Idosos √ó Interna√ß√µes", f"{correlacao:.3f}")

# Conclus√µes
st.header("üéØ Conclus√µes")
st.info("""
**Principais Achados:**
- Correla√ß√£o entre % de idosos e interna√ß√µes: **{:.3f}**
- Munic√≠pios com mais idosos tendem a ter mais interna√ß√µes hospitalares
- PIB influencia no acesso a procedimentos especializados
""".format(correlacao))

st.success("‚úÖ App funcionando no Streamlit Cloud!")
